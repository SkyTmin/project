// CocoMoneyModule.js - –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏
const CocoMoneyModule = {
    id: 'coco-money',
    name: 'Coco Money',
    version: '1.0.0',
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
    init() {
        this.setupEventListeners();
        this.setupFormHandlers();
        this.subscribeToState();
    },
    
    // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –º–æ–¥—É–ª—è
    async activate() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
        await this.loadData();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.render();
    },
    
    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –º–æ–¥—É–ª—è
    render() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        const nav = document.getElementById('main-nav');
        nav.classList.remove('hidden');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = window.stateManager.getState('user');
        if (user) {
            document.getElementById('user-email').textContent = user.email;
        }
        
        // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥—É–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Coco Money
        document.getElementById('auth-module').classList.add('hidden');
        document.getElementById('coco-money-module').classList.remove('hidden');
        
        // –†–µ–Ω–¥–µ—Ä–∏–º –≤–∫–ª–∞–¥–∫–∏ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç
        this.renderTabs();
        this.renderActiveSheet();
        this.updateBalance();
    },
    
    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    subscribeToState() {
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏—Å—Ç–æ–≤ –¥–æ—Ö–æ–¥–æ–≤
        window.stateManager.subscribe('incomeSheets', () => {
            this.renderTabs();
            this.updateBalance();
        });
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
        window.stateManager.subscribe('activeSheetId', () => {
            this.renderActiveSheet();
        });
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
        window.stateManager.subscribe('expenses', () => {
            this.renderExpenses();
            this.updateBalance();
            this.updateSheetInfo();
        });
    },
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏—Å—Ç–∞
        document.getElementById('add-sheet-btn').addEventListener('click', () => {
            this.showNewSheetModal();
        });
        
        // –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏—Å—Ç–∞
        document.getElementById('edit-sheet-btn').addEventListener('click', () => {
            this.showEditForm();
        });
        
        // –ö–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        document.getElementById('save-sheet-btn').addEventListener('click', () => {
            this.saveSheet();
        });
        
        document.getElementById('cancel-edit-btn').addEventListener('click', () => {
            this.hideEditForm();
        });
        
        document.getElementById('delete-sheet-btn').addEventListener('click', () => {
            this.deleteSheet();
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        document.getElementById('cancel-new-sheet').addEventListener('click', () => {
            this.hideNewSheetModal();
        });
    },
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ–æ—Ä–º
    setupFormHandlers() {
        // –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ª–∏—Å—Ç–∞
        document.getElementById('new-sheet-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            await this.createSheet(e.target);
        });
        
        // –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞
        document.getElementById('add-expense-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            await this.addExpense(e.target);
        });
    },
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
    async loadData() {
        this.showLoader(true);
        
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏—Å—Ç—ã –¥–æ—Ö–æ–¥–æ–≤
            const sheets = await window.apiClient.incomeSheets.getAll();
            window.stateManager.setState('incomeSheets', sheets);
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –ª–∏—Å—Ç—ã, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π
            if (sheets.length > 0) {
                window.stateManager.setState('activeSheetId', sheets[0].id);
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –¥–ª—è –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤
                const allExpenses = [];
                for (const sheet of sheets) {
                    const expenses = await window.apiClient.expenses.getBySheet(sheet.id);
                    allExpenses.push(...expenses);
                }
                window.stateManager.setState('expenses', allExpenses);
            }
        } catch (error) {
            this.showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
            console.error('Load data error:', error);
        } finally {
            this.showLoader(false);
        }
    },
    
    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–∫–ª–∞–¥–æ–∫
    renderTabs() {
        const container = document.getElementById('tabs-container');
        const sheets = window.stateManager.getState('incomeSheets');
        const activeSheetId = window.stateManager.getState('activeSheetId');
        
        container.innerHTML = '';
        
        sheets.forEach(sheet => {
            const tab = document.createElement('button');
            tab.className = `income-tab ${sheet.id === activeSheetId ? 'active' : ''}`;
            tab.innerHTML = `
                <span>${sheet.name}</span>
                <button class="tab-close" data-sheet-id="${sheet.id}">√ó</button>
            `;
            
            // –ö–ª–∏–∫ –ø–æ –≤–∫–ª–∞–¥–∫–µ
            tab.addEventListener('click', (e) => {
                if (!e.target.classList.contains('tab-close')) {
                    window.stateManager.setState('activeSheetId', sheet.id);
                }
            });
            
            // –ó–∞–∫—Ä—ã—Ç–∏–µ –≤–∫–ª–∞–¥–∫–∏
            tab.querySelector('.tab-close').addEventListener('click', (e) => {
                e.stopPropagation();
                this.confirmDeleteSheet(sheet.id);
            });
            
            container.appendChild(tab);
        });
    },
    
    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
    renderActiveSheet() {
        const sheet = window.stateManager.getActiveSheet();
        
        if (!sheet) {
            document.getElementById('sheet-info').classList.add('hidden');
            document.getElementById('expenses-section').classList.add('hidden');
            document.getElementById('edit-sheet-btn').classList.add('hidden');
            document.getElementById('sheet-name').textContent = '–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç –¥–æ—Ö–æ–¥–æ–≤';
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Å—Ç–µ
        document.getElementById('sheet-info').classList.remove('hidden');
        document.getElementById('expenses-section').classList.remove('hidden');
        document.getElementById('edit-sheet-btn').classList.remove('hidden');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        this.updateSheetInfo();
        this.renderExpenses();
    },
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—Å—Ç–µ
    updateSheetInfo() {
        const sheet = window.stateManager.getActiveSheet();
        if (!sheet) return;
        
        const expenses = window.stateManager.getActiveSheetExpenses();
        const totalExpenses = expenses.reduce((sum, e) => sum + parseFloat(e.amount), 0);
        const balance = parseFloat(sheet.income_amount) - totalExpenses;
        
        document.getElementById('sheet-name').textContent = sheet.name;
        document.getElementById('sheet-income').textContent = `${this.formatMoney(sheet.income_amount)} ‚ÇΩ`;
        document.getElementById('sheet-expenses').textContent = `${this.formatMoney(totalExpenses)} ‚ÇΩ`;
        document.getElementById('sheet-balance').textContent = `${this.formatMoney(balance)} ‚ÇΩ`;
    },
    
    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ä–∞—Å—Ö–æ–¥–æ–≤
    renderExpenses() {
        const container = document.getElementById('expenses-list');
        const expenses = window.stateManager.getActiveSheetExpenses();
        
        container.innerHTML = '';
        
        if (expenses.length === 0) {
            container.innerHTML = '<div class="empty-state"><p>–ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤</p></div>';
            return;
        }
        
        expenses.forEach(expense => {
            const item = document.createElement('div');
            item.className = 'expense-item';
            item.innerHTML = `
                <div class="expense-info">
                    <div class="expense-amount">${this.formatMoney(expense.amount)} ‚ÇΩ</div>
                    ${expense.note ? `<div class="expense-note">${expense.note}</div>` : ''}
                    <div class="expense-date">${this.formatDate(expense.created_at)}</div>
                </div>
                <div class="expense-actions">
                    <button class="btn-icon delete" data-expense-id="${expense.id}" title="–£–¥–∞–ª–∏—Ç—å">
                        üóëÔ∏è
                    </button>
                </div>
            `;
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è
            item.querySelector('.delete').addEventListener('click', () => {
                this.deleteExpense(expense.id);
            });
            
            container.appendChild(item);
        });
    },
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    updateBalance() {
        const totalBalance = window.stateManager.calculateTotalBalance();
        document.getElementById('total-balance').textContent = `${this.formatMoney(totalBalance)} ‚ÇΩ`;
    },
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–æ–≤–æ–≥–æ –ª–∏—Å—Ç–∞
    showNewSheetModal() {
        document.getElementById('new-sheet-modal').classList.remove('hidden');
        document.getElementById('new-sheet-name').focus();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        document.getElementById('new-sheet-date').value = new Date().toISOString().split('T')[0];
    },
    
    // –°–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–æ–≤–æ–≥–æ –ª–∏—Å—Ç–∞
    hideNewSheetModal() {
        document.getElementById('new-sheet-modal').classList.add('hidden');
        document.getElementById('new-sheet-form').reset();
    },
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ª–∏—Å—Ç–∞
    async createSheet(form) {
        const name = form.elements['new-sheet-name'].value;
        const income = form.elements['new-sheet-income'].value;
        const date = form.elements['new-sheet-date'].value;
        
        this.showLoader(true);
        
        try {
            const sheet = await window.apiClient.incomeSheets.create({
                name,
                income_amount: parseFloat(income),
                date
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const sheets = window.stateManager.getState('incomeSheets');
            sheets.push(sheet);
            window.stateManager.setState('incomeSheets', sheets);
            window.stateManager.setState('activeSheetId', sheet.id);
            
            this.hideNewSheetModal();
            this.showToast('–õ–∏—Å—Ç –¥–æ—Ö–æ–¥–æ–≤ —Å–æ–∑–¥–∞–Ω', 'success');
        } catch (error) {
            this.showToast('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞', 'error');
        } finally {
            this.showLoader(false);
        }
    },
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    showEditForm() {
        const sheet = window.stateManager.getActiveSheet();
        if (!sheet) return;
        
        document.getElementById('sheet-info').classList.add('hidden');
        document.getElementById('sheet-edit-form').classList.remove('hidden');
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        document.getElementById('edit-sheet-name').value = sheet.name;
        document.getElementById('edit-sheet-income').value = sheet.income_amount;
        document.getElementById('edit-sheet-date').value = sheet.date;
    },
    
    // –°–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    hideEditForm() {
        document.getElementById('sheet-info').classList.remove('hidden');
        document.getElementById('sheet-edit-form').classList.add('hidden');
    },
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ª–∏—Å—Ç–∞
    async saveSheet() {
        const sheet = window.stateManager.getActiveSheet();
        if (!sheet) return;
        
        const name = document.getElementById('edit-sheet-name').value;
        const income = document.getElementById('edit-sheet-income').value;
        const date = document.getElementById('edit-sheet-date').value;
        
        this.showLoader(true);
        
        try {
            const updated = await window.apiClient.incomeSheets.update(sheet.id, {
                name,
                income_amount: parseFloat(income),
                date
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            const sheets = window.stateManager.getState('incomeSheets');
            const index = sheets.findIndex(s => s.id === sheet.id);
            sheets[index] = updated;
            window.stateManager.setState('incomeSheets', sheets);
            
            this.hideEditForm();
            this.showToast('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
        } catch (error) {
            this.showToast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', 'error');
        } finally {
            this.showLoader(false);
        }
    },
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ª–∏—Å—Ç–∞
    confirmDeleteSheet(sheetId) {
        if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ª–∏—Å—Ç –¥–æ—Ö–æ–¥–æ–≤? –í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.')) {
            this.deleteSheet(sheetId);
        }
    },
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–∞
    async deleteSheet(sheetId) {
        const currentSheet = window.stateManager.getActiveSheet();
        sheetId = sheetId || (currentSheet && currentSheet.id);
        
        if (!sheetId) return;
        
        this.showLoader(true);
        
        try {
            await window.apiClient.incomeSheets.delete(sheetId);
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            const sheets = window.stateManager.getState('incomeSheets').filter(s => s.id !== sheetId);
            const expenses = window.stateManager.getState('expenses').filter(e => e.income_sheet_id !== sheetId);
            
            window.stateManager.setState('incomeSheets', sheets);
            window.stateManager.setState('expenses', expenses);
            
            // –ï—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π
            if (window.stateManager.getState('activeSheetId') === sheetId) {
                window.stateManager.setState('activeSheetId', sheets[0]?.id || null);
            }
            
            this.hideEditForm();
            this.showToast('–õ–∏—Å—Ç —É–¥–∞–ª–µ–Ω', 'success');
        } catch (error) {
            this.showToast('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è', 'error');
        } finally {
            this.showLoader(false);
        }
    },
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞
    async addExpense(form) {
        const sheet = window.stateManager.getActiveSheet();
        if (!sheet) return;
        
        const amount = form.elements['expense-amount'].value;
        const note = form.elements['expense-note'].value;
        
        this.showLoader(true);
        
        try {
            const expense = await window.apiClient.expenses.create({
                income_sheet_id: sheet.id,
                amount: parseFloat(amount),
                note
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const expenses = window.stateManager.getState('expenses');
            expenses.push(expense);
            window.stateManager.setState('expenses', expenses);
            
            form.reset();
            this.showToast('–†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω', 'success');
        } catch (error) {
            this.showToast('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞', 'error');
        } finally {
            this.showLoader(false);
        }
    },
    
    // –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞
    async deleteExpense(expenseId) {
        if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ä–∞—Å—Ö–æ–¥?')) return;
        
        this.showLoader(true);
        
        try {
            await window.apiClient.expenses.delete(expenseId);
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            const expenses = window.stateManager.getState('expenses').filter(e => e.id !== expenseId);
            window.stateManager.setState('expenses', expenses);
            
            this.showToast('–†–∞—Å—Ö–æ–¥ —É–¥–∞–ª–µ–Ω', 'success');
        } catch (error) {
            this.showToast('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞', 'error');
        } finally {
            this.showLoader(false);
        }
    },
    
    // –£—Ç–∏–ª–∏—Ç—ã
    formatMoney(amount) {
        return new Intl.NumberFormat('ru-RU').format(amount);
    },
    
    formatDate(dateString) {
        return new Date(dateString).toLocaleDateString('ru-RU');
    },
    
    showLoader(show) {
        const loader = document.getElementById('loader');
        if (show) {
            loader.classList.remove('hidden');
        } else {
            loader.classList.add('hidden');
        }
    },
    
    showToast(message, type = 'info') {
        const container = document.getElementById('toast-container');
        const toast = document.createElement('div');
        toast.className = `toast ${type}`;
        toast.textContent = message;
        
        container.appendChild(toast);
        
        setTimeout(() => {
            toast.style.animation = 'fadeOut 0.3s ease';
            setTimeout(() => toast.remove(), 300);
        }, 3000);
    }
};

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
window.moduleManager.register(CocoMoneyModule);